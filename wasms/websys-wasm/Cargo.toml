[package]
name = "wgpu-sys"
version = "0.1.0"
authors = ["c1101081 <c1101081@planet.kanazawa-it.ac.jp>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook","wee_alloc"]

[dependencies]
log = "0.4.22"
serde = {version = "1.0.204",features = ["derive"]} 
serde-wasm-bindgen = "0.6.5"
serde_json = "1.0.120"
wasm-bindgen = "0.2.92"
wasm-bindgen-futures = "0.4.42"
wasm-logger = "0.2.0"
tsify = "0.4.5"

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

web-sys = { version = "0.3.70", features = [
    "Window",
    "CanvasRenderingContext2d",
    "Document",
    "Element",
    "HtmlElement",
    "HtmlCanvasElement",
    "Navigator",
    "Gpu",
    "GpuDevice",
    "GpuDeviceDescriptor",
    "GpuAdapter",
    "GpuAdapterInfo",
    "GpuCanvasContext",
    "GpuSupportedFeatures",
    "GpuCommandEncoder",
    "GpuComputePassEncoder",
    "GpuRenderPassDescriptor",
    "GpuRenderPassEncoder",
    "GpuIndexFormat",
    "GpuTexture",
    "GpuTextureView",
    "GpuTextureViewDescriptor",
    "GpuColorDict",
    "GpuTextureFormat",
    "GpuVertexFormat",
    "GpuDeviceDescriptor",
    "GpuDeviceLostInfo",
    "GpuCanvasConfiguration",
    "GpuLoadOp",
    "GpuRenderPassColorAttachment",
    "GpuStoreOp",
    "GpuRenderPipeline",
    "GpuRenderPipelineDescriptor",
    "GpuFragmentState",
    "GpuVertexState",
    "GpuShaderModule",
    "GpuShaderModuleDescriptor",
    "GpuCommandBuffer",
    "GpuCommandBufferDescriptor",
    "GpuQueue",
    "GpuQueueDescriptor",
    "GpuFragmentState",
    "GpuColorTargetState",
    "GpuProgrammableStage",
    "OffscreenCanvas"
    ]}
gloo = {version = "0.11.0",features = ["futures"]}


# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }
js-sys = "0.3.70"

[dev-dependencies]
wasm-bindgen-test = "0.3.34"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"


